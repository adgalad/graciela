#!/usr/bin/env rungraciela

/*% LANGUAGE EnableTrace %*/

module Graph.bin begin

abstract ANode(T)
begin
  /* ANode variables */
  const MAX := 12 : int;
  var nodeSeq : set of (ANode(T)*);

  {repinv #nodeSeq <= MAX repinv}
  /* ANode procedures */
end


type Node(T) implements ANode(T)
begin
  /* Node variables */
  var tam, id := 0, 0 : int;
  var neighbor : array[MAX] of Node(T)*;
  var value    : T;

  
  {repinv 0 <= tam /\ tam <= MAX /\
      (% ∀ i : int | 0 <= i /\ i <= tam | 
        (% ∀ j : int | 0 <= j /\ j <= tam |
           i != j ==> neighbor[i] != neighbor[j] %) %)
  repinv}

  {coupinv true coupinv}

  where {
    nodeSeq := { i : int | 0 <= i /\ i < tam | neighbor[i] }
  }

  /* Node procedures */
  proc create (ref n : Node(T), in value : T, in id : int)
    var i := 0 : int;
    |[ n.value := value
     ; n.id    := id
     ; n.tam   := 0
     ; {inv i <= n.tam inv}
       {bound n.tam - i  bound}
       do i < n.tam -> n.neighbor[i] := null
                     ; i := i + 1
       od
    ]|

  proc insert (ref  n : Node(T), in newNode : Node(T)*)
    var i := 0 : int;
    var b := true : boolean;
    {pre n.tam < n.MAX /\  
        !(% exist i : int | 0 <= i /\ i < n.tam 
                     | n.neighbor[i] == newNode %)
    pre}
    {post newNode elem {i : int | 0 <= i /\ i <= n.tam | n.neighbor[i]} post}
    |[ if n.tam == 0 -> n.neighbor[0] := newNode
                      ; n.tam := 1
       [] otherwise 
        -> {inv true inv}
           {bound n.tam - i bound}
           do i < n.tam
            -> if n.neighbor[i] == newNode -> writeln("Inserting an already existent node") 
                                            ; b,i := false, n.tam
               [] otherwise -> i := i + 1
               fi
           od
         ; if b -> n.neighbor[n.tam] := newNode
                 ; n.tam := n.tam + 1
           fi
       fi
    ]|

  proc path(in n : Node(T), in x : int, out b : boolean, in bo : int)
    var i   := 0 : int;
    {bound bo bound}
    |[ if n.id == x -> b := true
       [] otherwise -> {inv true inv}
                       {bound n.tam - i bound}
                       do i < n.tam 
                        -> path(*n.neighbor[i], x, b, bo - 1)
                         ; if b === true -> i := n.tam;
                           [] otherwise  -> i := i + 1
                           fi
                       od
       fi
     ; if b -> writeln(n.id) 
       [] otherwise -> skip
       fi
    ]|
end


proc test1_Grafo (in x : int*, inout y : int*, out z : int*)
  |[ if x == null -> writeln("correcto") [] x != null -> writeln("MAL") fi
   ; if y == null -> writeln("correcto") [] y != null -> writeln("MAL") fi
   ; if z == null -> writeln("correcto") [] z != null -> writeln("MAL") fi

  ]|

proc test2_Grafo (in x : Node(int)*, inout y : Node(int)*, out z : Node(int)*)
  {pre x == null /\ y == null /\ z == null  pre}
  |[ if x == null -> writeln("correcto") [] x != null -> writeln("MAL") fi
   ; if y == null -> writeln("correcto") [] y != null -> writeln("MAL") fi
   ; if z == null -> writeln("correcto") [] z != null -> writeln("MAL") fi
  ]|

proc test3_Grafo (in x : Node(int)*, out z : Node(int)*, inout y : Node(int)*)
  {pre  x != null /\ y != null /\ z == null   pre}
  |[ if x != null -> writeln("correcto") [] x == null -> writeln("MAL") fi
   ; if y != null -> writeln("correcto") [] y == null -> writeln("MAL") fi
   ; if z == null -> writeln("correcto") [] z != null -> writeln("MAL") fi
  ]|

// proc test4_Grafo (in x : Node(int)*, out z : Node(int)*, inout y : Node(int)*)
//   {pre  x != null /\ y != null /\ z == null /\
//         (*x).next == null /\ (*y).next == null   
//   pre}

//   {post true post}
//   |[ if (*x).next == null -> writeln("correcto") [] (*x).next != null -> writeln("MAL") fi
//    ; if (*y).next == null -> writeln("correcto") [] (*y).next != null -> writeln("MAL") fi
//    ; if         z == null -> writeln("correcto") []         z != null -> writeln("MAL") fi
//    ; if (*x).id > -1 -> writeln((*x).id, "√") [] x == null -> writeln("MAL") fi
//    ; if (*y).id > -1 -> writeln((*y).id, "√") [] y == null -> writeln("MAL") fi
//   ]|

func f (x : int) -> int 
  {bound 10-x bound}
  |[
    if x < 10 -> f(x+1)+1
    [] otherwise -> 1
    fi
  ]|

proc g (in x : int)
  {bound 10-x bound}
  |[
    if x < 10 -> g(x+1) 
    [] otherwise -> skip
    fi
  ]|

proc test_Grafo ( )
  |[ var n : array[12] of Node(int)*
   ; var bool : boolean
   ; var x := 10 : int
   ; var i := 0 : int
   ; {inv true inv}
     {bound 11 - i bound}
     do i < 11
      -> new(n[i])
       ; create(*n[i], 1, i) 
       ; i := i + 1
     od
   ; n[11] := null
   ; insert(*n[1],n[7])
   ; insert(*n[1],n[2])
   ; insert(*n[1],n[5])//          _ 1
   ; insert(*n[2],n[3])//         / /  \
   ; insert(*n[2],n[4])//        / 2    5
   ; insert(*n[3],n[7])//       / / \    \
   ; insert(*n[4],n[8])//      | 3   4    6
   ; insert(*n[5],n[6])//      |/     \  /  \
   ; insert(*n[6],n[8])//      7        8    9
   ; insert(*n[6],n[9])//                \  /
   ; insert(*n[8],n[10])//                10
   ; insert(*n[9],n[10])
   ; path(*n[1],3, bool, 11)
   ; writeln("----")
   ; path(*n[5], 10, bool, 11)
   ; |[ var ptr : int*
      ; test1_Grafo (ptr, ptr, ptr)

      ; test2_Grafo (n[11],n[11],n[11])
      ; test3_Grafo (n[1],n[1],n[1])
      // ; test4_Grafo (n[1],n[1],n[1])
     ]| 
   ; i := 0
   ; {inv true inv}
     {bound 11 - i bound}
     do i < 11
      -> free(n[i])
       ; i := i + 1
     od
   ; g(1)
   ; writeln(f(1)) 

  ]|

end